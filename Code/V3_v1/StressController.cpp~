#include "VEML6030rpi.h"
#include <wiringPiI2C.h>
#include "Fir1.h"
#include "CppTimer.h"
#include <fstream>
#include <array>
#include <time.h>
#include <string>
#include <unistd.h>
#include <bits/stdc++.h>
#include <iostream>


  //////// INITIALIZATION OF VARIABLES  
  
  VEML6030rpi veml6030;
  int iuserrest, iuserrun, iuserstress, isession, iconfig, beg;
  string status, username, myexit, session, config;
  Fir1 fir("coeffnoise.dat");
  bool userfound=false;
  
  //new profile or existing profile
  ifstream statustxt;
  string statusfname = "/var/www/html/Project/status.txt";
  //current user in use
  ifstream usernametxt;
  string usernamefname = "/var/www/html/Project/username.txt";
  //Data of every user
  fstream userstxt;
  string usersfname = "/var/www/html/Project/users.txt";
  //exit to main menu
  ifstream exittxt;
  string exitfname = "/var/www/html/Project/exit.txt";
  //session of checking for stress
  ifstream sessiontxt;
  string sessionfname = "/var/www/html/Project/session.txt";
  //configuration process
  ifstream configtxt;
  string configfname = "/var/www/html/Project/config.txt";
  //output of sensor
  //Maybe Remove
  ofstream whitetxt;
  string whitefname = "/var/www/html/Project/white.txt";
  //log of events
  ofstream eventlogtxt;
  string eventlogfname = "/var/www/html/Project/eventlog.txt";

class ObtainData : public CppTimer {

  void timerEvent() {
    if(beg == 0){
     beg++;
     sleep(3);}
    //add code to test for stress
    veml6030.als = veml6030.getALS();
    veml6030.white = veml6030.getWhite();
    //cout<<veml6030.als<<"   "<<veml6030.white<<endl;

    if(session == "1"){
      //Detect stress
      veml6030.als = fir.filter(veml6030.als);
      veml6030.white = fir.filter(veml6030.white);

      cout<<veml6030.als<<"   "<<veml6030.white<<endl;

      int tempstress = 10;

      time_t my_time = time(NULL);
      if(tempstress <= iuserstress){
      eventlogtxt << username << "-----" << tempstress << "-----" << ctime(&my_time) << endl;
      eventlogtxt.close();
    }}
    else if(config == "1"){
      //calculate rest
      veml6030.als = fir.filter(veml6030.als);
      veml6030.white = fir.filter(veml6030.white);

      cout<<veml6030.als<<"   "<<veml6030.white<<endl;
      iuserrest = 99;
    }
    else if(config == "2"){
      //calculate run
      veml6030.als = fir.filter(veml6030.als);
      veml6030.white = fir.filter(veml6030.white);

      cout<<veml6030.als<<"   "<<veml6030.white<<endl;
      iuserrun = 99;
    }


  }

};

int main(void){
  //Sensor
  //initialize sensor
  veml6030.init(0x48);
  veml6030.powerSaving(0x0000);
  cout << "Initialized Sensor" << endl;

  //Filter
  fir.reset ();
  int taps;
  taps = fir.getTaps();


  
  //Timer
  ObtainData Odata;
    beg = 0;
    Odata.start(5000000);
  
    cout << "Timer started" << endl;
  
    int cnt = 1;
  //main function loop
  while(1){
    if(cnt>50000000){ // we stablish a counter to manage until when are we are going to read the file
      
        // opening files
        statustxt.open(statusfname.c_str());
        usernametxt.open(usernamefname.c_str());
        userstxt.open(usersfname.c_str());
        exittxt.open(exitfname.c_str());
        sessiontxt.open(sessionfname.c_str());
        configtxt.open(configfname.c_str());
        whitetxt.open(whitefname.c_str());
        eventlogtxt.open(eventlogfname.c_str());

        // extracting data from the files
        statustxt >> status;
        usernametxt>>username;
        exittxt>>myexit;
        sessiontxt>>session;
        configtxt>>config;
        
        //Convert strings to int if needed
        
        /**
        istatus = stoi(status);
        iexit = stoi(exit);
        isession = stoi(session);
        iconfig = stoi(config);
        **/
        
        //close all the files as soon as possible.
        statustxt.close();
        usernametxt.close();
        userstxt.close();
        exittxt.close();
        sessiontxt.close();
        configtxt.close();
        whitetxt.close();
        eventlogtxt.close();
        

  if(status == "0"){
    cout << "Sesion closed"<<endl;
    //Read for statusint
    //statustxt.is_open();
    //getline(statustxt, status);
    //statusint = stoi(status);
    //cout << statusint<<endl;
    //  statustxt.close();
    //    sleep(1);
   // Exit Loop when statusint is not 0
  }

  if(status == "1"){//Existing Profile
    cout << "LOGGED IN"<<endl;
    string content;
    while (getline(userstxt, content))
    {
        if(content.find(username) != std::string::npos){ //Find the user in the string
          userfound=true; // if we find the user, we write true on user found. Where/When to set it back to 0????
          int sizef = username.size();
          iuserrest = stoi(content.substr((sizef+1), 2));
          iuserrun = stoi(content.substr((sizef+4), 2));
          iuserstress = stoi(content.substr((sizef+7), 2));
          cout << "user:"<< username<< "," << iuserrest << "," << iuserrun <<"," << iuserstress << endl;
          break;
          }
      }
  if(myexit == "0"){

  if((session == "1") && (myexit == "0")){
    //start session timer function
    cout << "Session reading"<<endl;

  //keeping session alive
  if(session == "1"){

  }
  }
  }else{
    cout<<"exit"<<endl;
  }

  //reset to main menu
  
  }
  if(status == "2"){//New Profile
    cout << "USER SIGN UP"<<endl;
    if(config == "1"){
    //calculate stress here
    iuserstress = 99;
    //write to end of users.txt
    userstxt.open(usersfname.c_str());
    userstxt << username << "/" << iuserrest << "/" << iuserrun << "/" << iuserstress << endl;
    userstxt.close();

  }
  else{
    // Do nothing cause we don't need to calibrate
  }
    
}
cnt=0;
}


else { 
    cnt++;
  }
}
}

